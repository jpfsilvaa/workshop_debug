Slide 2
O que é "debugar"?
- O termo depuração pode ser atribuído à almirante Grace Hopper, que trabalhou na Universidade de Harvard na década de 1940. Quando um de seus colegas encontrou uma mariposa impedindo a operação de um dos computadores da universidade, ela disse a eles que estavam depurando o sistema. Os programadores de computador foram registrados pela primeira vez usando os termos bugs e debugging na década de 1950 e, no início da década de 1960, o termo debugging era comumente aceito na comunidade de programação. [https://aws.amazon.com/what-is/debugging/]

- A depuração é o processo de encontrar e corrigir erros ou bugs no código-fonte de qualquer software. Quando o software não funciona como esperado, os programadores de computador estudam o código para determinar a causa dos erros. Eles usam ferramentas de depuração para executar o software em um ambiente controlado, verificar o código passo a passo, analisar e corrigir o problema. [https://aws.amazon.com/what-is/debugging/]
- "The art of debugging is figuring out what you really told your program to do rather than what you thought you told it to do." [Andrew Singer][https://medium.com/free-code-camp/how-to-think-like-a-programmer-lessons-in-problem-solving-d1d8bf1de7d2]

- 

Slide 3
Por que preciso debugar?
- Bugs e erros ocorrem na programação de computadores porque é uma atividade abstrata e conceitual. Os computadores manipulam dados na forma de sinais eletrônicos. As linguagens de programação abstraem essas informações para que os seres humanos possam interagir com os computadores de forma mais eficiente. Qualquer tipo de software tem várias camadas de abstração, com diferentes componentes que se comunicam para que um aplicativo funcione corretamente. Quando ocorrem erros, encontrar e resolver o problema pode ser um desafio. As ferramentas e estratégias de depuração ajudam a corrigir os problemas mais rapidamente e aumentam a produtividade do desenvolvedor. Como resultado, a qualidade do software e a experiência do usuário final melhoram. [https://aws.amazon.com/what-is/debugging/]




Slide 4
Tipos de erro que necessitam de debug (na verdade existem mais, e isso depende do contexto, mas essa categorização é suficiente):
- Erros semânticos (errors due to an improper use of program statements[https://www.inf.unibz.it/~calvanese/teaching/ip/lecture-notes])
	- relacionados à linguagem
	- Operações na ordem incorreta
	- Uso incorreto de comparações
	- loop infinito

- Erros de lógica (errors due to the fact that the specification is not respected [https://www.inf.unibz.it/~calvanese/teaching/ip/lecture-notes])
	- relacionados ao algoritmo
	- o algoritmo não resolve o problema

- Erros em tempo de execução
- "Runtime errors occur due to the computing environment in which the software code runs. Examples include insufficient memory space or stack overflow."[https://aws.amazon.com/what-is/debugging/]
- "Errors that cannot be detected by the compiler" [https://www.inf.unibz.it/~calvanese/teaching/ip/lecture-notes]

Slide 5
Como debugar?
- "Implementation of an algorithm is a cyclic process of developing a program, debugging it, and learning its properties, then refining the implementation until a desired level of performance is reached" [Sedwick]
- Processo de debugar: - Identificar o erro, Analisar o erro, corrigir e validar
- Ferramentas na disciplina: GDB, VSCode, Valgrind

Slide 6
Comandos do GDB (dizer que vamos usar esse slide como uma "cola" para os exemplos)
- call
- brreak condicional
- display
- ...

Slide 7-10
4 exemplos (resolvendo junto com os alunos) usando os comandos do GDB do slide anterior
- Aqui posso fazer os exemplos dizendo que tipo de erro estamos tentando encontrar


Slide 10
Explicando o uso do Valgrind

Slide 11-13
3 exemplos (resolvendo junto com os alunos) usando o Valgrind
- Aqui posso fazer os exemplos dizendo que tipo de erro estamos tentando encontrar


Slide 14
- Exercícios para fazerem sozinhos, sem dizer que tipo de erro está acontecendo, mas ainda assim acompanhando eles






FINAL DA APRESENTAÇÃO:
Problem-solving skills are almost unanimously the most important qualification that employers look for….more than programming languages proficiency, debugging, and system design. Demonstrating computational thinking or the ability to break down large, complex problems is just as valuable (if not more so) than the baseline technical skills required for a job. [https://www.hackerrank.com/research/developer-skills/2018]



TALVEZ USE:
"When debugging a program that uses a random-number generator, it is usually a good idea to use a trivial or degenerate generator at first, such as one which always returns 0 or one which returns numbers in order" [Sedwick]